import "dotenv/config";

// --- Configuration ---
const OLD_SERVICE_URL =
  process.env.OLD_SERVICE_URL || "https://grants-rss.up.railway.app";
const NEW_SERVICE_URL = process.env.NEW_SERVICE_URL || "http://localhost:4001";
const OLD_API_SECRET = process.env.OLD_API_SECRET;
const NEW_API_SECRET = process.env.NEW_API_SECRET;

const FEED_ID_TO_MIGRATE = "test";

// --- Helper Functions ---

async function fetchWithAuth(
  url: string,
  apiSecret: string | undefined,
  options: RequestInit = {},
) {
  if (!apiSecret) {
    throw new Error(`API secret is not provided for request to ${url}`);
  }

  const headers = {
    "Content-Type": "application/json",
    Authorization: `Bearer ${apiSecret}`,
    ...options.headers,
  };

  const response = await fetch(url, { ...options, headers });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    throw new Error(
      `Request to ${url} failed with status ${response.status}: ${errorData.error || response.statusText}`,
    );
  }

  return response.json();
}

// --- Migration Logic ---

async function migrate() {
  console.log("Starting RSS migration...");

  if (!OLD_API_SECRET || !NEW_API_SECRET) {
    console.error(
      "OLD_API_SECRET and NEW_API_SECRET environment variables must be set. Aborting.",
    );
    return;
  }

  try {
    // 1. Fetch feed configuration from the old service
    console.log(
      `Fetching feed config for '${FEED_ID_TO_MIGRATE}' from old service...`,
    );
    const feedConfig = await fetchWithAuth(
      `${OLD_SERVICE_URL}/api/config`,
      OLD_API_SECRET,
    );
    console.log("Successfully fetched feed configuration.");

    // 2. Fetch items from the old service for the specific feed
    console.log(
      `Fetching items for feed '${FEED_ID_TO_MIGRATE}' from old service...`,
    );
    const itemsToMigrate = await fetchWithAuth(
      `${OLD_SERVICE_URL}/api/items`,
      OLD_API_SECRET,
    );
    console.log(`Found ${itemsToMigrate.length} items to migrate.`);

    if (itemsToMigrate.length === 0) {
      console.log("No items to migrate. Exiting.");
      return;
    }

    // 3. Upsert feed configuration in the new service (initialize)
    console.log(
      `Upserting feed config for '${FEED_ID_TO_MIGRATE}' in new service...`,
    );
    const upsertResponse = await fetchWithAuth(
      `${NEW_SERVICE_URL}/api/feeds/${FEED_ID_TO_MIGRATE}/config`,
      NEW_API_SECRET,
      {
        method: "PUT",
        body: JSON.stringify(feedConfig),
      },
    );
    console.log(
      upsertResponse.created
        ? `Successfully created new feed with ID: ${FEED_ID_TO_MIGRATE}`
        : `Successfully updated feed config for ID: ${FEED_ID_TO_MIGRATE}`,
    );

    // 4. Push each item to the new feed (distribute)
    console.log(`Migrating items to new feed '${FEED_ID_TO_MIGRATE}'...`);
    let successCount = 0;
    let failureCount = 0;

    for (const item of itemsToMigrate) {
      try {
        // Remove fields that should be regenerated by the new service
        const { id, guid, ...migrationItem } = item;

        await fetchWithAuth(
          `${NEW_SERVICE_URL}/api/feeds/${FEED_ID_TO_MIGRATE}/items`,
          NEW_API_SECRET,
          {
            method: "POST",
            body: JSON.stringify(migrationItem),
          },
        );
        console.log(`  - Migrated item: ${item.title}`);
        successCount++;
      } catch (error) {
        console.error(`  - Failed to migrate item: ${item.title}`, error);
        failureCount++;
      }
    }

    console.log("\n--- Migration Complete ---");
    console.log(`Successfully migrated: ${successCount} items`);
    console.log(`Failed to migrate:    ${failureCount} items`);
    console.log("--------------------------");
  } catch (error) {
    console.error("\nAn error occurred during migration:", error);
  }
}

// Run the migration
migrate();
